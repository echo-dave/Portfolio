//Project arrays in the format of title, content
$(document).ready(function() {
  let hangman = [
    "Hangman: word game",
    "This is a javascript based word game styled with some basic css. The basis for it revolves around an array of words from which a random word is chosen, checked to see if it's been used this session, then loads / resets the interface. A number of loops and conditionals are used to account for searching for repeat characters, and displaying them appropriately. Most of the content boxes are java script generated with css styling by class."
  ];

  let rps = [
    "Rock Paper Scissors",
    "This was a bit of a logic problem in terms of all the comparisons for win / loss / tie states. Initially a series of if statements were used to work out the problem before consolidating to loops. The computer choice is randomly generated by javascript builtin function, floored, multiplied by 3, and then compared against an array. Javascript"
  ];

  let starwars = [
    "StarWars RPG",
    "This little RPG was fun to put together with jQuery even for something pretty basic. While not the most challenging of projects, it did give ideas of different things to utilize in the future: moving elements without the need for animating or removal and re-adding."
  ];

  let trivia = [
    "Trivial Trivia",
    "A basic trivia game concept working with javascript timer functions and a single object to build questions, answer choices, and an answer index to compare with. A deceptive number of timers and clear timers were needed with moves between functions to dodge and correct bugs. JQuery"
  ];

  let loco = [
    "LoCo Search",
    "LoCo is a mobile first search for music and events with historical weather data for a sense of forecasting beyond 7 days. Built with javascript / jQuery utilizing event and weather APIs for data and Bulma css framework for styling. Links to venue locations and Youtube searches for planning and discovery."

  ];

  let friendfind = [
    "Friend Finder",
    "Friend Finder is a NodeJS application utilizing MySQL database for persistent storage of potential friends. A short survey is used to quickly gather information to compare the user to those in the database and pick the best match. Survey takers are added to the database and included in future searches."

  ];

  let bamazon = [
    "Bamazon",
    "Bamazon is a webstore front listing utilizing NodeJS and ExpressJS for webserver / routing and backend logic. Sequelize with MySQL handles the various database requests for displaying, updating, and creating products. JQuery is utilized for building and manipulating the frontend dynamically while Bulma sass is used to for styling."
  ];

  let rtm = [
    "Ride the Mountain",
    "Ride the Mountain is a full stack Heroku deployment of a mountain bike trail review site. Utilizing MySQL, Cloudinary persistent storage of uploaded images, and Bulma sass framework all tied together by NodeJS and jQuery. As a design choice we opted not to use email as part of our authentication in order to keep the barrier to entry low for demonstration purposes. The authentication system utilizes bcrypt, express-sessions, http-only cookies, and local storage."

  ];

  //event.client
  function mouseOver(event) {
    let cX = event.clientX;
    let cY = event.clientY;
    let left = event.clientX + 15 + "px";
    let heightPopup = $("#popup").css("height").length - 2;
    heightPopup = $("#popup")
      .css("height")
      .substring(0, heightPopup);
    console.log(heightPopup);
    let top = parseInt(event.clientY) - parseInt(heightPopup) - 60 + "px";
    if (cY - parseInt(heightPopup) < 40) {
      top = parseInt(event.clientY) + 30 + "px";
    }
    if ($(window).width() - 320 - event.clientX < 0) {
      left = event.clientX - 15 - 320 + "px";
    }

    $("#popup").css({ top: top, left: left });

    // console.log(`top ${cY} left ${cX}`);
    // console.log(cX + " , " + cY);
  }

  //output to screen
  // $("#hangman").hover(mousein(hangman),function(){
  //     $('#popup').remove();
  //     console.log("leave hover");
  // });

  // $("#rps").hover( mousein(rps), function(){
  //     $('#popup').remove();
  //     console.log("leave hover");
  // });

  //attempt to abstract functions
  function mousein(project) {
    return function() {
      $(`<div class="popup">`).appendTo("body");
      $(".popup").html(`<h1>${project[0]}</h1><p>${project[1]}</p>`);
      mouseOver(event);
      console.log("hover");
    };
  }
  function mouseout() {
    $("#popup").remove();
    console.log("leave hover");
  }

  function mouseactive(project) {
    return function() {
      if (!document.getElementById("popup")) {
        $(`<div id="popup" class="popup">`).appendTo("body");
        $("#popup").html(`<h1>${project[0]}</h1><p>${project[1]}</p>`);
      }
      $("a").on("click", function(e) {
        $("#popup").remove();
      });
      mouseOver(event);
    };
  }

  //clear popups
  $(".project").mouseout(mouseout);

  //project popups
  $("#hangman").mousemove(mouseactive(hangman));
  $("#rps").mousemove(mouseactive(rps));
  $("#starwars").mousemove(mouseactive(starwars));
  $("#trivia").mousemove(mouseactive(trivia));
  $("#loco").mousemove(mouseactive(loco));
  $("#friendfind").mousemove(mouseactive(friendfind));
  $("#bamazon").mousemove(mouseactive(bamazon));
  $("#rtm").mousemove(mouseactive(rtm));
});
